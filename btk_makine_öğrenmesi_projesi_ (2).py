# -*- coding: utf-8 -*-
"""BTK Makine Öğrenmesi Projesi .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t-pcyCMlTpWsw2LEBQyLswrct9UZcpac
"""

!pip install sentence-transformers
from sentence_transformers import SentenceTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
import pandas as pd

# SentenceTransformer modelini yükle
model = SentenceTransformer('all-MiniLM-L6-v2')

# Veri setlerini yükleme
data = pd.read_csv('/content/liar_train.csv', on_bad_lines='skip')
test_data=pd.read_csv("/content/liar_test.csv")

# İlk 5000 örneği seçme
data = data.head(5000)
test_data = test_data.head(5000)

# Veri hakkında genel bilgi
print(data.head())
print(data.info())
print(data.describe())

# Etiketleri ve cümleleri ayırma
labels = data["label-liar"]
sentences = data["fullText_based_content"]

# Cümleleri gömme (embedding) işlemi
embeddings = model.encode(sentences)
print(f"Embedding boyutu: {embeddings.shape}")

# Logistic Regression modeli eğitme
classifier = LogisticRegression(max_iter=1000)
classifier.fit(embeddings, labels)

# Test verileri için gömme (embedding) işlemi
test_sentences = test_data["fullText_based_content"]
test_embeddings = model.encode(test_sentences)

# Tahmin yapma
predictions = classifier.predict(test_embeddings)

# Gerçek etiketleri ve tahminleri elde etme
test_labels = test_data["label-liar"]
test_labels = test_labels.head(5000)  # Test veri kümesinin etiketlerini almak

# Performans metriklerini hesaplama
accuracy = accuracy_score(test_labels, predictions)
precision = precision_score(test_labels, predictions, average='weighted')
recall = recall_score(test_labels, predictions, average='weighted')
f1 = f1_score(test_labels, predictions, average='weighted')

# Performans metriklerini yazdırma
print(f"Doğruluk (Accuracy): {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Skoru: {f1:.2f}")

# Tahmin sonuçlarını yazdırma
for i, (sentence, pred) in enumerate(zip(test_sentences, predictions)):
    #print(f"Sentence {i+1}: {sentence}")
    print(f"Prediction = {pred}")
    print()